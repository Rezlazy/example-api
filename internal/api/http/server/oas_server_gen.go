// Code generated by ogen, DO NOT EDIT.

package server

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1AuthLoginPost implements POST /v1/auth/login/ operation.
	//
	// Ручка для Авторизации пользователя.
	//
	// POST /v1/auth/login/
	V1AuthLoginPost(ctx context.Context, req *AuthLoginRequestSchema) (*Token, error)
	// V1TodoItemPost implements POST /v1/todo/item/ operation.
	//
	// Ручка для создания заметки.
	//
	// POST /v1/todo/item/
	V1TodoItemPost(ctx context.Context, req *ItemCreateInput) (*Item, error)
	// V1TodoListGet implements GET /v1/todo/list/ operation.
	//
	// Ручка для получения TODO листов.
	//
	// GET /v1/todo/list/
	V1TodoListGet(ctx context.Context, params V1TodoListGetParams) (ListListResponseSchema, error)
	// V1TodoListPost implements POST /v1/todo/list/ operation.
	//
	// Ручка для создания TODO листа.
	//
	// POST /v1/todo/list/
	V1TodoListPost(ctx context.Context, req *ListCreateInput) (*List, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
