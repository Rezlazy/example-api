// Code generated by ogen, DO NOT EDIT.

package server

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// V1TodoListGetParams is parameters of GET /v1/todo/list/ operation.
type V1TodoListGetParams struct {
	// ID-ки листов.
	Ids []int64
}

func unpackV1TodoListGetParams(packed middleware.Parameters) (params V1TodoListGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "ids",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Ids = v.([]int64)
		}
	}
	return params
}

func decodeV1TodoListGetParams(args [0]string, argsEscaped bool, r *http.Request) (params V1TodoListGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ids",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotIdsVal int64
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToInt64(val)
						if err != nil {
							return err
						}

						paramsDotIdsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Ids = append(params.Ids, paramsDotIdsVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ids",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
