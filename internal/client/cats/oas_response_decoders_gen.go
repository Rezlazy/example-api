// Code generated by ogen, DO NOT EDIT.

package dadata

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func decodeBreedsBreedIDFactsGetResponse(resp *http.Response) (res *BreedsBreedIDFactsGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response BreedsBreedIDFactsGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper BreedsBreedIDFactsGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Server" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Server",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotServerVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotServerVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Server.SetTo(wrapperDotServerVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Server header")
				}
			}
			// Parse "X-Cloud-Trace-Context" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Cloud-Trace-Context",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXCloudTraceContextVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXCloudTraceContextVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XCloudTraceContext.SetTo(wrapperDotXCloudTraceContextVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Cloud-Trace-Context header")
				}
			}
			// Parse "access-control-expose-headers" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "access-control-expose-headers",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotAccessControlExposeHeadersVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotAccessControlExposeHeadersVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.AccessControlExposeHeaders.SetTo(wrapperDotAccessControlExposeHeadersVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse access-control-expose-headers header")
				}
			}
			// Parse "pagination-count" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-count",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationCountVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationCountVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationCount.SetTo(wrapperDotPaginationCountVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-count header")
				}
			}
			// Parse "pagination-limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationLimit.SetTo(wrapperDotPaginationLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-limit header")
				}
			}
			// Parse "pagination-page" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-page",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationPageVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationPageVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationPage.SetTo(wrapperDotPaginationPageVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-page header")
				}
			}
			// Parse "ratelimit-consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "ratelimit-consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRatelimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRatelimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RatelimitConsumed.SetTo(wrapperDotRatelimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse ratelimit-consumed header")
				}
			}
			// Parse "ratelimit-limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "ratelimit-limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRatelimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRatelimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RatelimitLimit.SetTo(wrapperDotRatelimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse ratelimit-limit header")
				}
			}
			// Parse "ratelimit-remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "ratelimit-remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRatelimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRatelimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RatelimitRemaining.SetTo(wrapperDotRatelimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse ratelimit-remaining header")
				}
			}
			// Parse "ratelimit-reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "ratelimit-reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRatelimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRatelimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RatelimitReset.SetTo(wrapperDotRatelimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RatelimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse ratelimit-reset header")
				}
			}
			// Parse "retry-after-seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "retry-after-seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RetryAfterSeconds.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse retry-after-seconds header")
				}
			}
			// Parse "strict-transport-security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "strict-transport-security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse strict-transport-security header")
				}
			}
			// Parse "vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse vary header")
				}
			}
			// Parse "x-content-type-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-content-type-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-content-type-options header")
				}
			}
			// Parse "x-dns-prefetch-control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-dns-prefetch-control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-dns-prefetch-control header")
				}
			}
			// Parse "x-download-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-download-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-download-options header")
				}
			}
			// Parse "x-frame-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-frame-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-frame-options header")
				}
			}
			// Parse "x-response-time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-response-time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-response-time header")
				}
			}
			// Parse "x-xss-protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-xss-protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-xss-protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeBreedsBreedIDGetResponse(resp *http.Response) (res *BreedsBreedIDGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response BreedsBreedIDGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper BreedsBreedIDGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeBreedsGetResponse(resp *http.Response) (res *BreedsGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response BreedsGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper BreedsGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Access-Control-Expose-Headers" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Access-Control-Expose-Headers",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotAccessControlExposeHeadersVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotAccessControlExposeHeadersVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.AccessControlExposeHeaders.SetTo(wrapperDotAccessControlExposeHeadersVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Access-Control-Expose-Headers header")
				}
			}
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "Pagination-Count" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Count",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationCountVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationCountVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationCount.SetTo(wrapperDotPaginationCountVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Count header")
				}
			}
			// Parse "Pagination-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationLimit.SetTo(wrapperDotPaginationLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Limit header")
				}
			}
			// Parse "Pagination-Page" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Page",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationPageVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationPageVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationPage.SetTo(wrapperDotPaginationPageVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Page header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RetryAfterSeconds.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeBreedsSearchGetResponse(resp *http.Response) (res *BreedsSearchGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response BreedsSearchGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper BreedsSearchGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeFactsGetResponse(resp *http.Response) (res *FactsGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response FactsGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper FactsGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Server" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Server",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotServerVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotServerVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Server.SetTo(wrapperDotServerVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Server header")
				}
			}
			// Parse "X-Cloud-Trace-Context" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Cloud-Trace-Context",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXCloudTraceContextVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXCloudTraceContextVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XCloudTraceContext.SetTo(wrapperDotXCloudTraceContextVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Cloud-Trace-Context header")
				}
			}
			// Parse "access-control-expose-headers" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "access-control-expose-headers",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotAccessControlExposeHeadersVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotAccessControlExposeHeadersVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.AccessControlExposeHeaders.SetTo(wrapperDotAccessControlExposeHeadersVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse access-control-expose-headers header")
				}
			}
			// Parse "pagination-count" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-count",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationCountVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationCountVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationCount.SetTo(wrapperDotPaginationCountVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-count header")
				}
			}
			// Parse "pagination-limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationLimit.SetTo(wrapperDotPaginationLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-limit header")
				}
			}
			// Parse "pagination-page" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "pagination-page",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationPageVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationPageVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationPage.SetTo(wrapperDotPaginationPageVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse pagination-page header")
				}
			}
			// Parse "strict-transport-security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "strict-transport-security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse strict-transport-security header")
				}
			}
			// Parse "vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse vary header")
				}
			}
			// Parse "x-content-type-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-content-type-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-content-type-options header")
				}
			}
			// Parse "x-dns-prefetch-control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-dns-prefetch-control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-dns-prefetch-control header")
				}
			}
			// Parse "x-download-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-download-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-download-options header")
				}
			}
			// Parse "x-frame-options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-frame-options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-frame-options header")
				}
			}
			// Parse "x-response-time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-response-time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-response-time header")
				}
			}
			// Parse "x-xss-protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-xss-protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-xss-protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeFavouritesGetResponse(resp *http.Response) (res *FavouritesGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response FavouritesGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper FavouritesGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Access-Control-Expose-Headers" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Access-Control-Expose-Headers",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotAccessControlExposeHeadersVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotAccessControlExposeHeadersVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.AccessControlExposeHeaders.SetTo(wrapperDotAccessControlExposeHeadersVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Access-Control-Expose-Headers header")
				}
			}
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "Pagination-Count" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Count",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationCountVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationCountVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationCount.SetTo(wrapperDotPaginationCountVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Count header")
				}
			}
			// Parse "Pagination-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationLimit.SetTo(wrapperDotPaginationLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Limit header")
				}
			}
			// Parse "Pagination-Page" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Page",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationPageVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationPageVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationPage.SetTo(wrapperDotPaginationPageVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Page header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RetryAfterSeconds.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeFavouritesPostResponse(resp *http.Response) (res *FavouritesPostOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response FavouritesPostOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper FavouritesPostOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RetryAfterSeconds.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeImagesBkIEhN3pGGetResponse(resp *http.Response) (res *ImagesBkIEhN3pGGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ImagesBkIEhN3pGGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper ImagesBkIEhN3pGGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeImagesGetResponse(resp *http.Response) (res *ImagesGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ImagesGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper ImagesGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse connection header")
				}
			}
			// Parse "content-length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "content-length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse content-length header")
				}
			}
			// Parse "date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse date header")
				}
			}
			// Parse "vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse vary header")
				}
			}
			// Parse "x-response-time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "x-response-time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse x-response-time header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeImagesSearchGetResponse(resp *http.Response) (res ImagesSearchGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ImagesSearchGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper ImagesSearchGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Cache-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Cache-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotCacheControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotCacheControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.CacheControl.SetTo(wrapperDotCacheControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Cache-Control header")
				}
			}
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Expires" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Expires",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotExpiresVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotExpiresVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Expires.SetTo(wrapperDotExpiresVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Expires header")
				}
			}
			// Parse "Last-Modified" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Last-Modified",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotLastModifiedVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotLastModifiedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.LastModified.SetTo(wrapperDotLastModifiedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Last-Modified header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ImagesSearchGetUnauthorized
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper ImagesSearchGetUnauthorizedHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Server" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Server",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotServerVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotServerVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Server.SetTo(wrapperDotServerVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.Server.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Server header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeImagesUploadPostResponse(resp *http.Response) (res *ImagesUploadPostCreatedHeaders, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ImagesUploadPostCreated
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper ImagesUploadPostCreatedHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeVotesGetResponse(resp *http.Response) (res *VotesGetOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response VotesGetOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper VotesGetOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Access-Control-Expose-Headers" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Access-Control-Expose-Headers",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotAccessControlExposeHeadersVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotAccessControlExposeHeadersVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.AccessControlExposeHeaders.SetTo(wrapperDotAccessControlExposeHeadersVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Access-Control-Expose-Headers header")
				}
			}
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "Pagination-Count" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Count",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationCountVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationCountVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationCount.SetTo(wrapperDotPaginationCountVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Count header")
				}
			}
			// Parse "Pagination-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationLimit.SetTo(wrapperDotPaginationLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Limit header")
				}
			}
			// Parse "Pagination-Page" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Pagination-Page",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotPaginationPageVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotPaginationPageVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.PaginationPage.SetTo(wrapperDotPaginationPageVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Pagination-Page header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeVotesPostResponse(resp *http.Response) (res *VotesPostCreatedHeaders, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response VotesPostCreated
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper VotesPostCreatedHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "RateLimit-Consumed" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Consumed",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitConsumedVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitConsumedVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitConsumed.SetTo(wrapperDotRateLimitConsumedVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Consumed header")
				}
			}
			// Parse "RateLimit-Limit" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Limit",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitLimitVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitLimitVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitLimit.SetTo(wrapperDotRateLimitLimitVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Limit header")
				}
			}
			// Parse "RateLimit-Remaining" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Remaining",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitRemainingVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitRemainingVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitRemaining.SetTo(wrapperDotRateLimitRemainingVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Remaining header")
				}
			}
			// Parse "RateLimit-Reset" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "RateLimit-Reset",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRateLimitResetVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRateLimitResetVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RateLimitReset.SetTo(wrapperDotRateLimitResetVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RateLimitReset.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse RateLimit-Reset header")
				}
			}
			// Parse "Retry-After-Seconds" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Retry-After-Seconds",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotRetryAfterSecondsVal float64
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToFloat64(val)
								if err != nil {
									return err
								}

								wrapperDotRetryAfterSecondsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.RetryAfterSeconds.SetTo(wrapperDotRetryAfterSecondsVal)
							return nil
						}); err != nil {
							return err
						}
						if err := func() error {
							if value, ok := wrapper.RetryAfterSeconds.Get(); ok {
								if err := func() error {
									if err := (validate.Float{}).Validate(float64(value)); err != nil {
										return errors.Wrap(err, "float")
									}
									return nil
								}(); err != nil {
									return err
								}
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Retry-After-Seconds header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeWebhooksPostResponse(resp *http.Response) (res *WebhooksPostOKHeaders, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response WebhooksPostOK
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			var wrapper WebhooksPostOKHeaders
			wrapper.Response = response
			h := uri.NewHeaderDecoder(resp.Header)
			// Parse "Connection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Connection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotConnectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotConnectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Connection.SetTo(wrapperDotConnectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Connection header")
				}
			}
			// Parse "Content-Length" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Content-Length",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotContentLengthVal int
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToInt(val)
								if err != nil {
									return err
								}

								wrapperDotContentLengthVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.ContentLength.SetTo(wrapperDotContentLengthVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Content-Length header")
				}
			}
			// Parse "Date" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Date",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotDateVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotDateVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Date.SetTo(wrapperDotDateVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Date header")
				}
			}
			// Parse "Keep-Alive" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Keep-Alive",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotKeepAliveVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotKeepAliveVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.KeepAlive.SetTo(wrapperDotKeepAliveVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Keep-Alive header")
				}
			}
			// Parse "Strict-Transport-Security" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Strict-Transport-Security",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotStrictTransportSecurityVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotStrictTransportSecurityVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.StrictTransportSecurity.SetTo(wrapperDotStrictTransportSecurityVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Strict-Transport-Security header")
				}
			}
			// Parse "Vary" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "Vary",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotVaryVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotVaryVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.Vary.SetTo(wrapperDotVaryVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse Vary header")
				}
			}
			// Parse "X-Content-Type-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Content-Type-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXContentTypeOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXContentTypeOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XContentTypeOptions.SetTo(wrapperDotXContentTypeOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Content-Type-Options header")
				}
			}
			// Parse "X-DNS-Prefetch-Control" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-DNS-Prefetch-Control",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDNSPrefetchControlVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDNSPrefetchControlVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDNSPrefetchControl.SetTo(wrapperDotXDNSPrefetchControlVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-DNS-Prefetch-Control header")
				}
			}
			// Parse "X-Download-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Download-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXDownloadOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXDownloadOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XDownloadOptions.SetTo(wrapperDotXDownloadOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Download-Options header")
				}
			}
			// Parse "X-Frame-Options" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Frame-Options",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXFrameOptionsVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXFrameOptionsVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XFrameOptions.SetTo(wrapperDotXFrameOptionsVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Frame-Options header")
				}
			}
			// Parse "X-Response-Time" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-Response-Time",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXResponseTimeVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXResponseTimeVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XResponseTime.SetTo(wrapperDotXResponseTimeVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-Response-Time header")
				}
			}
			// Parse "X-XSS-Protection" header.
			{
				cfg := uri.HeaderParameterDecodingConfig{
					Name:    "X-XSS-Protection",
					Explode: false,
				}
				if err := func() error {
					if err := h.HasParam(cfg); err == nil {
						if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
							var wrapperDotXXSSProtectionVal string
							if err := func() error {
								val, err := d.DecodeValue()
								if err != nil {
									return err
								}

								c, err := conv.ToString(val)
								if err != nil {
									return err
								}

								wrapperDotXXSSProtectionVal = c
								return nil
							}(); err != nil {
								return err
							}
							wrapper.XXSSProtection.SetTo(wrapperDotXXSSProtectionVal)
							return nil
						}); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return res, errors.Wrap(err, "parse X-XSS-Protection header")
				}
			}
			return &wrapper, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
